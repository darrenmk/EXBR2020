citation("tidyverse")
citation("ggplot2")
seq(1,10,2)
seq(1,5)
seq(0,1000,10)
length(seq(0,1000,10))
seq2 <- seq(0,10,10)
seq()
seq2
seq1 <- seq(1,5)
seq1+seq2
seq2 <- rep(seq(1,10,10)5)
seq2 <- rep(seq(1,10,10),5)
seq2 <- rep(seq(0,10,10),5)
seq2 <- seq(0,10,10)
seq3 <- c(0,0,0,0,0,10,10,10,10,10)
seq1 <- rep(seq(1,5),2)
seq4 <- seq1 + seq3
seq1 <- rep(seq(1,5),100)
seq5 <- seq(0,1000,10)
rep(seq5,times=5)
rep(seq5,each=5)
seq2 <- seq(0,1000,by=10,each=5)
seq2 <- seq(0,1000,10,each=5)
seq1 <- seq(0,1000,10)
seq2 <- seq(seq1,each=5)
seq2 <- rep(seq(0,1000,10),each=5)
seq2 <- rep(seq(0,1000,10),each=5)
seq1 <- rep(seq(1,5),50)
seq1 <- rep(seq(1,5),101)
seq3 <- seq1 + seq2
seq3
seq1 <- rep(seq(1,5),101)
seq2 <- rep(seq(0,1000,10),each=5)
seq3 <- seq1 + seq2
seq <- rep(seq(1,5),101) + rep(seq(0,1000,10),each=5)
x = c(5,3,0,4)
y = c(4,4,1,3)
lm1 = lm(y~x)
lm1
plot(x,y)
abline(lm1)
lm2 <- lm(0~1)
abline(lm2)
abline(lm2)
lm2
setwd('D:\\Data\\Documents\\Research\\Tutorial\\')
subjects <- read.csv('React3Subjects.csv')
codes <- read.csv('React3Matrix.csv')
# Read data into a csv file
data_append <- {}
for (s in 1:dim(subjects)[1]){
#print(s)
file_append <- {}
for (b in 1:4){
filename <- paste('RawData\\react', subjects$sID[s], '_0', b, '_0.MLOG', sep="")
#print(filename)
file0 = read.table(filename, sep="\t", header=FALSE, fill=TRUE)
# this is just some processing
goodTrial1 <- file0[,3] != -2 # value of third column is NOT -2
goodTrial2 <- is.na(file0[,6]) # is NA in column 6
goodTrial3 <- !is.na(file0[,5]) # is NOT NA in column 5
goodTrials <- goodTrial1 & goodTrial2 & goodTrial3
file1 <- file0[goodTrials,]
# make our data file
file <- matrix(0,dim(file1)[1],5)
file[,1] <- s
file[,2] <- b
file[,3] <- file1[,4] # this is our motion condition
soa <- (file1[,5]+4)*(1000/60) # fame correction for motion simulator, this is our SOA
file[,4] <- soa
file[soa == -100,5] <- file1[soa < 0,1] + 100 # adjust reaction time
file[soa >= 0,5] <- file1[soa >= 0,1] #keep reaction time
file_append <- rbind(file_append,file)
}
data_append <- rbind(data_append,file_append)
}
colnames(data_append) <- c("Subject","Block","Condition","SOA","RT")
newCode <- rep(0,dim(data_append)[1])
newCode
for (i in 1:dim(data_append)[1]){
newCode[i] <- which(data_append$Condition[i]==codes$code)
}
data_append$Condition
i = 1
which(data_append[i,3]==codes$code)
data_append[i,3]
codes$code
newCode[i] <- which(data_append[i,3]==codes$code)
newCode
newCode <- rep(0,dim(data_append)[1])
for (i in 1:dim(data_append)[1]){
newCode[i] <- which(data_append[i,3]==codes$code)
}
newCode
data_append[data_append[,3]==1,5]
View(data_append)
o
o=1
idx <- data_append[,3]==o
idx
idx[idx]
idx[idx] <- condOutliers
idx <- data_append[,3]==o
logRT <- log(data_append[idx,5]) # index by condition number, get RT then calculate log
Q1 <- quantile(logRT)[2]
Q3 <- quantile(logRT)[4]
IQR <- Q3-Q1
lowOutlier <- logRT < Q1 - 3*IQR
highOutlier <- logRT > Q3 + 3*IQR
condOutliers <- lowOutlier | highOutlier
idx[idx] <- condOutliers
idx
condOutliers
rep(FALSE,dim(data_append)[1])
logical(rep(FALSE,dim(data_append)[1]))
logical(rep(FALSE,dim(data_append)[1])))
logical(rep(FALSE,dim(data_append)[1]))
as.logical(rep(FALSE,dim(data_append)[1]))
idx2 <- as.logical(rep(FALSE,dim(data_append)[1]))
idx
idx
idx2
idx2 <- idx2 | idx
idx2
idx2 <- as.logical(rep(FALSE,dim(data_append)[1])) # first make this all FALSE
for (o in 1:27){
idx <- data_append[,3]==o
logRT <- log(data_append[idx,5]) # index by condition number, get RT then calculate log
Q1 <- quantile(logRT)[2]
Q3 <- quantile(logRT)[4]
IQR <- Q3-Q1
lowOutlier <- logRT < Q1 - 3*IQR
highOutlier <- logRT > Q3 + 3*IQR
condOutliers <- lowOutlier | highOutlier
idx[idx] <- condOutliers # idx now includes outliers only
idx2 <- idx2 | idx
}
sum(idx2)
allOutliers <- as.logical(rep(FALSE,dim(data_append)[1])) # first make this all FALSE
for (o in 1:27){
idx <- data_append[,3]==o
logRT <- log(data_append[idx,5]) # index by condition number, get RT then calculate log
Q1 <- quantile(logRT)[2]
Q3 <- quantile(logRT)[4]
IQR <- Q3-Q1
lowOutlier <- logRT < Q1 - 3*IQR
highOutlier <- logRT > Q3 + 3*IQR
condOutliers <- lowOutlier | highOutlier
idx[idx] <- condOutliers # idx now includes outliers for this condition only
allOutliers <- allOutliers | idx # append after each loop
}
data <- data.frame(data_append[!allOutliers,])
data_append
newCode <- rep(0,dim(data_append)[1])
for (i in 1:dim(data_append)[1]){
newCode[i] <- which(data_append[i,3]==codes$code)
}
newCode
data_append
data_append[,3] <- newCode
data_append
View(data_append)
allOutliers <- as.logical(rep(FALSE,dim(data_append)[1])) # first make this all FALSE
for (o in 1:27){
idx <- data_append[,3]==o
logRT <- log(data_append[idx,5]) # index by condition number, get RT then calculate log
Q1 <- quantile(logRT)[2]
Q3 <- quantile(logRT)[4]
IQR <- Q3-Q1
lowOutlier <- logRT < Q1 - 3*IQR
highOutlier <- logRT > Q3 + 3*IQR
condOutliers <- lowOutlier | highOutlier
idx[idx] <- condOutliers # idx now includes outliers for this condition only
allOutliers <- allOutliers | idx # append after each loop
}
sum(allOutliers)
data <- data.frame(data_append[!allOutliers,])
grandMean <- tapply(data$RT,data$Condition,mean)
grandSd <- with(data,tapply(RT,Condition,sd))
grandSe <- grandSd / sqrt(35)
subjectMean <- tapply(data$RT,list(data$Subject,data$Condition),mean)
subjectBlockMean <- with(data,tapply(RT,list(Subject,Block,Condition),mean))
##### Now we do the statistics
options(contrasts=c("contr.sum","contr.poly") )
library(car) # for the repeated measures ANOVA
library(effects) # for the ANCOVA
library(tidyverse) # for the ggplot figures
library(ggpubr) # for arranging the panels
## Stats for Figure 2: SOA x Accel for each Vi (repeated measures ANOVA)
grandSoa <- c(rep("vestibular",9),rep("sync",9),rep("visual",9))
grandSoa <- factor(grandSoa,levels=c("vestibular","sync","visual"))
grandVi <- as.factor(rep(c(rep("3",3),rep("9",3),rep("15",3)),3))
grandVi <- factor(grandVi,levels=c(3,9,15)) # need to manually order
grandVf <- as.factor(rep(c(rep(c("21","27","33"),3)),3))
grandAccel <- as.factor(rep(c("54","72","90","36","54","72","18","36","54"),3))
grandAccel <- factor(grandAccel,levels=c("18","36","54","72","90")) # need to manually order
grandAccelNum <- as.numeric(as.character(grandAccel)) # convert to numeric values to treat as a continuous covariate
grandViSoa <- interaction(grandVi,grandSoa) # combine to make 9 levels / conditions
grandReact3 <- data.frame(grandMean,grandSe,grandSoa,grandVi,grandVf,grandAccel,grandAccelNum,grandViSoa)
# Vi=3, Accel=54,72,90
grandVi3Soa <- as.factor(c(rep("vestibular",3),rep("sync",3),rep("visual",3)))
grandVi3Accel <- as.factor(rep(c("54","72","90"),3))
grandVi3Factors <- interaction(grandVi3Soa,grandVi3Accel)
grandVi3iData <- data.frame(grandVi3Soa,grandVi3Accel)
grandVi3iDesign <- ~grandVi3Soa*grandVi3Accel
grandVi3Columns <- c(1L,2L,3L,1+9L,2+9L,3+9L,1+18L,2+18L,3+18L)
grandVi3SubjectMean <- subjectMean[,grandVi3Columns]
colnames(grandVi3SubjectMean) <- grandVi3Factors
grandVi3Mlm <- lm(grandVi3SubjectMean~1)
grandVi3Aov <- Anova(grandVi3Mlm,idata=grandVi3iData,idesign=grandVi3iDesign,type="III")
summary(grandVi3Aov,multivariate=FALSE)
# Vi=9, Accel=36,54,72
grandVi9Soa <- as.factor(c(rep("vestibular",3),rep("sync",3),rep("visual",3)))
grandVi9Accel <- as.factor(rep(c("36","54","72"),3))
grandVi9Factors <- interaction(grandVi9Soa,grandVi9Accel)
grandVi9iData <- data.frame(grandVi9Soa,grandVi9Accel)
grandVi9iDesign <- ~grandVi9Soa*grandVi9Accel
grandVi9Columns <- c(4L,5L,6L,4+9L,5+9L,6+9L,4+18L,5+18L,6+18L)
grandVi9SubjectMean <- subjectMean[,grandVi9Columns]
colnames(grandVi9SubjectMean) <- grandVi9Factors
grandVi9Mlm <- lm(grandVi9SubjectMean~1)
grandVi9Aov <- Anova(grandVi9Mlm,idata=grandVi9iData,idesign=grandVi9iDesign,type="III")
summary(grandVi9Aov,multivariate=FALSE)
# Vi=15, Accel=18,36,54
grandVi15Soa <- as.factor(c(rep("vestibular",3),rep("sync",3),rep("visual",3)))
grandVi15Accel <- as.factor(rep(c("18","36","54"),3))
grandVi15Factors <- interaction(grandVi15Soa,grandVi15Accel)
grandVi15iData <- data.frame(grandVi15Soa,grandVi15Accel)
grandVi15iDesign <- ~grandVi15Soa*grandVi15Accel
grandVi15Columns <- c(7L,8L,9L,7+9L,8+9L,9+9L,7+18L,8+18L,9+18L)
grandVi15SubjectMean <- subjectMean[,grandVi15Columns]
colnames(grandVi15SubjectMean) <- grandVi15Factors
grandVi15Mlm <- lm(grandVi15SubjectMean~1)
grandVi15Aov <- Anova(grandVi15Mlm,idata=grandVi15iData,idesign=grandVi15iDesign,type="III")
summary(grandVi15Aov,multivariate=FALSE)
## Figure 2: SOA x Accel for each Vi
grandVi3 <- ggplot(grandReact3 %>% filter(grandVi==3),aes(x=grandAccel,y=grandMean,group=grandSoa,colour=grandSoa)) +
geom_line(position=position_dodge(width=0.15), size=1) +
geom_point(position=position_dodge(width=0.15), aes(shape=grandSoa), size=4) +
geom_errorbar(position=position_dodge(width=0.15), aes(ymin=grandMean-grandSe, ymax=grandMean+grandSe), width=0.1, size=1) +
labs(x = expression(paste("Acceleration (m/s" ^2, ")")), y = "Response Time (ms)") +
scale_y_continuous(breaks = seq(560, 760, by = 20), limits=c(560,860)) +
guides(linetype=FALSE,shape=FALSE,colour=FALSE) +
annotate("text",x=2,y=820,label="Initial Velocity: 3m/s", size=5) +
theme_classic()
grandVi9 <- ggplot(grandReact3 %>% filter(grandVi==9),aes(x=grandAccel,y=grandMean,group=grandSoa,colour=grandSoa)) +
geom_line(position=position_dodge(width=0.15), size=1) +
geom_point(position=position_dodge(width=0.15), aes(shape=grandSoa), size=4) +
geom_errorbar(position=position_dodge(width=0.15), aes(ymin=grandMean-grandSe, ymax=grandMean+grandSe), width=0.1, size=1) +
labs(x = expression(paste("Acceleration (m/s" ^2, ")")), y = "Response Time (ms)") +
scale_y_continuous(breaks = seq(560, 760, by = 20), limits=c(560,860)) +
guides(linetype=FALSE,shape=FALSE,colour=FALSE) +
annotate("text",x=2,y=820,label="Initial Velocity: 9m/s", size=5) +
theme_classic()
grandVi15 <- ggplot(grandReact3 %>% filter(grandVi==15),aes(x=grandAccel,y=grandMean,group=grandSoa,colour=grandSoa)) +
geom_line(position=position_dodge(width=0.15), size=1) +
geom_point(position=position_dodge(width=0.15), aes(shape=grandSoa), size=4) +
geom_errorbar(position=position_dodge(width=0.15), aes(ymin=grandMean-grandSe, ymax=grandMean+grandSe), width=0.1, size=1) +
labs(x = expression(paste("Acceleration (m/s" ^2, ")")), y = "Response Time (ms)") +
scale_colour_discrete(name="SOA",labels=c("Vestibular First (by 100ms)","In Sync","Visual First (by 100ms)")) +
scale_shape_discrete(name="SOA",labels=c("Vestibular First (by 100ms)","In Sync","Visual First (by 100ms)")) +
scale_y_continuous(breaks = seq(560, 760, by = 20), limits=c(560,860)) +
annotate("text",x=2,y=820, label="Initial Velocity: 15m/s", size=5) +
theme_classic()
## This is Figure 2 (save manually as .eps to avoid pixellation)
ggarrange(grandVi3, grandVi9, grandVi15, labels = c("A", "B", "C"),
common.legend = TRUE, legend="top", nrow = 1, ncol = 3
)
